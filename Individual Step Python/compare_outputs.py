#!/usr/bin/env python3
"""
COMPARE_OUTPUTS - Compare Octave and Python pipeline output files

This script compares the .txt output files generated by the Octave and Python
test scripts to verify that both implementations produce identical results.
"""

import os
import re
from typing import Dict, List, Tuple


def parse_output_file(filename: str) -> Dict[str, str]:
    """Parse an output file and extract key-value pairs"""
    data = {}
    
    if not os.path.exists(filename):
        print(f"Warning: File {filename} not found")
        return data
    
    with open(filename, 'r') as f:
        for line in f:
            line = line.strip()
            if ':' in line and not line.startswith('==='):
                key, value = line.split(':', 1)
                data[key.strip()] = value.strip()
    
    return data


def compare_values(octave_val: str, python_val: str, key: str, tolerance: float = 1e-10) -> Tuple[bool, str]:
    """Compare two values with appropriate tolerance for numerical values"""
    
    # Try to compare as numbers first
    try:
        oct_num = float(octave_val)
        py_num = float(python_val)
        
        # For very small numbers, use absolute tolerance
        if abs(oct_num) < 1e-6 and abs(py_num) < 1e-6:
            diff = abs(oct_num - py_num)
            if diff <= tolerance:
                return True, f"Match (diff: {diff:.2e})"
            else:
                return False, f"Numerical difference: {diff:.2e}"
        
        # For larger numbers, use relative tolerance  
        else:
            if oct_num == 0 and py_num == 0:
                return True, "Both zero"
            elif oct_num == 0 or py_num == 0:
                diff = abs(oct_num - py_num)
                return diff <= tolerance, f"One zero, diff: {diff:.2e}"
            else:
                rel_diff = abs((oct_num - py_num) / max(abs(oct_num), abs(py_num)))
                if rel_diff <= tolerance:
                    return True, f"Match (rel diff: {rel_diff:.2e})"
                else:
                    return False, f"Relative difference: {rel_diff:.2e}"
    
    except ValueError:
        # Compare as strings
        if octave_val == python_val:
            return True, "String match"
        else:
            return False, f"String difference: '{octave_val}' vs '{python_val}'"


def compare_step_files(step_num: int) -> Tuple[bool, List[str]]:
    """Compare output files for a specific step"""
    
    octave_file = f"step{step_num}_output_octave.txt"
    python_file = f"step{step_num}_output_python.txt" 
    
    print(f"\n--- Step {step_num} Comparison ---")
    
    octave_data = parse_output_file(octave_file)
    python_data = parse_output_file(python_file)
    
    if not octave_data and not python_data:
        print(f"Both files missing for step {step_num}")
        return True, []
    elif not octave_data:
        print(f"Octave file missing: {octave_file}")
        return False, [f"Missing Octave file: {octave_file}"]
    elif not python_data:
        print(f"Python file missing: {python_file}")
        return False, [f"Missing Python file: {python_file}"]
    
    # Get all keys from both files
    all_keys = set(octave_data.keys()) | set(python_data.keys())
    
    matches = 0
    total = 0
    differences = []
    
    for key in sorted(all_keys):
        total += 1
        
        octave_val = octave_data.get(key, "MISSING")
        python_val = python_data.get(key, "MISSING")
        
        if octave_val == "MISSING":
            print(f"‚úó {key:25}: Missing in Octave")
            differences.append(f"{key}: Missing in Octave")
        elif python_val == "MISSING":
            print(f"‚úó {key:25}: Missing in Python") 
            differences.append(f"{key}: Missing in Python")
        else:
            match, reason = compare_values(octave_val, python_val, key)
            if match:
                print(f"‚úì {key:25}: {reason}")
                matches += 1
            else:
                print(f"‚úó {key:25}: {reason}")
                differences.append(f"{key}: {reason}")
    
    success = (matches == total)
    print(f"\nStep {step_num} Summary: {matches}/{total} values match")
    
    return success, differences


def main():
    """Main comparison function"""
    
    print("=" * 60)
    print("OCTAVE vs PYTHON PIPELINE COMPARISON")
    print("=" * 60)
    
    overall_success = True
    all_differences = []
    
    # Compare each step
    for step in range(1, 6):
        step_success, step_diffs = compare_step_files(step)
        overall_success = overall_success and step_success
        all_differences.extend([f"Step {step}: {diff}" for diff in step_diffs])
    
    # Final summary
    print("\n" + "=" * 60)
    print("OVERALL COMPARISON SUMMARY")
    print("=" * 60)
    
    if overall_success:
        print("üéâ SUCCESS: All steps match between Octave and Python!")
        print("The Python implementation produces identical results.")
    else:
        print(f"‚ùå DIFFERENCES FOUND: {len(all_differences)} issues detected")
        print("\nAll differences:")
        for i, diff in enumerate(all_differences, 1):
            print(f"  {i}. {diff}")
    
    print("\nComparison completed.")
    
    # Generate comparison report
    with open('comparison_report.txt', 'w') as f:
        f.write("OCTAVE vs PYTHON PIPELINE COMPARISON REPORT\n")
        f.write("=" * 50 + "\n\n")
        
        if overall_success:
            f.write("RESULT: SUCCESS - All values match\n\n")
        else:
            f.write(f"RESULT: {len(all_differences)} differences found\n\n")
            f.write("DIFFERENCES:\n")
            for diff in all_differences:
                f.write(f"  - {diff}\n")
    
    print("Detailed report saved to: comparison_report.txt")
    
    return overall_success


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
