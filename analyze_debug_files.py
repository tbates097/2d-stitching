#!/usr/bin/env python3
"""
MATLAB Debug File Analyzer
Analyzes the debug files generated by MultiZone2DCal_test.m
"""

import scipy.io
import numpy as np
import matplotlib.pyplot as plt
import os
from pathlib import Path

def load_matlab_file(filepath):
    """Load a MATLAB .mat file and return its contents"""
    try:
        # First try with scipy.io (handles v4, v6, v7 formats)
        return scipy.io.loadmat(filepath)
    except Exception as e:
        try:
            # Try with h5py for newer formats (v7.3)
            import h5py
            print(f"Trying h5py format for {filepath}...")
            
            data = {}
            with h5py.File(filepath, 'r') as f:
                def extract_data(name, obj):
                    if isinstance(obj, h5py.Dataset):
                        data[name] = np.array(obj)
                f.visititems(extract_data)
            return data
        except Exception as e2:
            print(f"Error loading {filepath} with both scipy.io and h5py: {e}, {e2}")
            print("This might be an unsupported MATLAB format. Try re-saving in MATLAB with:")
            print(f"  load('{filepath}')")
            print(f"  save('{filepath[:-4]}_v7.mat', '-v7')")
            return None

def analyze_multizone_debug():
    """Analyze the main multizone debug file"""
    print("="*60)
    print("ANALYZING MULTIZONE DEBUG FILE")
    print("="*60)
    
    # Load the main debug file (v7 converted version)
    debug_file = 'matlab_multizone_debug_v7.mat'
    if not os.path.exists(debug_file):
        print(f"Debug file {debug_file} not found!")
        return
    
    data = load_matlab_file(debug_file)
    if data is None:
        return
    
    # Print available variables
    print(f"\nVariables in {debug_file}:")
    for key in sorted(data.keys()):
        if not key.startswith('__'):  # Skip MATLAB metadata
            value = data[key]
            if isinstance(value, np.ndarray):
                print(f"  {key}: {value.shape} {value.dtype}")
                if value.size < 10:  # Print small arrays
                    print(f"    Value: {value}")
            else:
                print(f"  {key}: {type(value)} = {value}")
    
    # Extract key matrices
    X = data.get('X')
    Y = data.get('Y') 
    Ax1Err = data.get('Ax1Err')
    Ax2Err = data.get('Ax2Err')
    
    if X is not None and Y is not None:
        print(f"\nPosition matrices:")
        print(f"  X (Axis 1 positions): {X.shape}")
        print(f"    Range: {X.min():.3f} to {X.max():.3f}")
        print(f"  Y (Axis 2 positions): {Y.shape}")
        print(f"    Range: {Y.min():.3f} to {Y.max():.3f}")
    
    if Ax1Err is not None and Ax2Err is not None:
        print(f"\nError matrices:")
        print(f"  Ax1Err (Axis 1 errors): {Ax1Err.shape}")
        print(f"    Range: {Ax1Err.min():.6f} to {Ax1Err.max():.6f}")
        print(f"    RMS: {np.sqrt(np.mean(Ax1Err**2)):.6f}")
        print(f"  Ax2Err (Axis 2 errors): {Ax2Err.shape}")
        print(f"    Range: {Ax2Err.min():.6f} to {Ax2Err.max():.6f}")
        print(f"    RMS: {np.sqrt(np.mean(Ax2Err**2)):.6f}")
    
    return data

def analyze_zone_debug_files():
    """Analyze individual zone debug files"""
    print("\n" + "="*60)
    print("ANALYZING INDIVIDUAL ZONE DEBUG FILES")
    print("="*60)
    
    zone_files = [f for f in os.listdir('.') if f.endswith('_zone_debug_v7.mat')]
    zone_files.sort()
    
    zone_data = {}
    for zone_file in zone_files:
        print(f"\n--- {zone_file} ---")
        data = load_matlab_file(zone_file)
        if data is None:
            continue
            
        zone_data[zone_file] = data
        
        # Print key info for each zone
        for key in ['X', 'Y', 'Ax1Err', 'Ax2Err']:
            if key in data:
                arr = data[key]
                if isinstance(arr, np.ndarray):
                    print(f"  {key}: {arr.shape}, range: {arr.min():.3f} to {arr.max():.3f}")
    
    return zone_data

def create_visualizations(multizone_data, zone_data=None):
    """Create visualizations of the data"""
    print("\n" + "="*60)
    print("CREATING VISUALIZATIONS")
    print("="*60)
    
    if multizone_data is None:
        print("No multizone data available for visualization")
        return
    
    X = multizone_data.get('X')
    Y = multizone_data.get('Y')
    Ax1Err = multizone_data.get('Ax1Err')
    Ax2Err = multizone_data.get('Ax2Err')
    
    if X is None or Y is None or Ax1Err is None or Ax2Err is None:
        print("Missing required data for visualization")
        return
    
    # Create a figure with subplots
    fig, axes = plt.subplots(2, 2, figsize=(15, 12))
    fig.suptitle('2D Calibration Analysis', fontsize=16)
    
    # Axis 1 Error Surface Plot
    im1 = axes[0,0].contourf(X, Y, Ax1Err, levels=20, cmap='RdBu_r')
    axes[0,0].set_title('Axis 1 Position Error')
    axes[0,0].set_xlabel('X Position')
    axes[0,0].set_ylabel('Y Position')
    plt.colorbar(im1, ax=axes[0,0], label='Error')
    
    # Axis 2 Error Surface Plot  
    im2 = axes[0,1].contourf(X, Y, Ax2Err, levels=20, cmap='RdBu_r')
    axes[0,1].set_title('Axis 2 Position Error')
    axes[0,1].set_xlabel('X Position')
    axes[0,1].set_ylabel('Y Position')
    plt.colorbar(im2, ax=axes[0,1], label='Error')
    
    # Error Histograms
    axes[1,0].hist(Ax1Err.flatten(), bins=50, alpha=0.7, edgecolor='black')
    axes[1,0].set_title('Axis 1 Error Distribution')
    axes[1,0].set_xlabel('Error')
    axes[1,0].set_ylabel('Frequency')
    axes[1,0].grid(True, alpha=0.3)
    
    axes[1,1].hist(Ax2Err.flatten(), bins=50, alpha=0.7, edgecolor='black')
    axes[1,1].set_title('Axis 2 Error Distribution')
    axes[1,1].set_xlabel('Error')
    axes[1,1].set_ylabel('Frequency')
    axes[1,1].grid(True, alpha=0.3)
    
    plt.tight_layout()
    
    # Save the plot
    output_file = 'calibration_analysis.png'
    plt.savefig(output_file, dpi=150, bbox_inches='tight')
    print(f"Saved visualization to: {output_file}")
    
    # Show the plot
    plt.show()

def main():
    """Main analysis function"""
    print("MATLAB Debug File Analysis")
    print("Current directory:", os.getcwd())
    
    # Check what files are available
    mat_files = [f for f in os.listdir('.') if f.endswith('.mat')]
    print(f"\nAvailable .mat files: {mat_files}")
    
    # Analyze multizone debug file
    multizone_data = analyze_multizone_debug()
    
    # Analyze individual zone files
    zone_data = analyze_zone_debug_files()
    
    # Create visualizations
    create_visualizations(multizone_data, zone_data)
    
    print("\n" + "="*60)
    print("ANALYSIS COMPLETE")
    print("="*60)

if __name__ == "__main__":
    main()