function data = A3200ACC2DMULTIZONE(InputFile, CalFile, OutAxis3, OutAx3Value, Units)
% A3200ACC2DMULTIZONE  Plot 2D accuracy measured using the A3200 Controller
%     Opens a data file generated by the A3200 motion programs Static2DCal.pgm or Dynamic2DCal_Task2.pgm.  
%     The axes names, axes numbers, and stage serial number are read from the header of the data file. 
%     User units and gantry axis configuration of the system are also read from the data file header.
%     Four charts are generated:  2D error in the Axis #1 direction, 2D error in the Axis #2 direction, 2D vector
%     sum error, and orthogonality.  Depending on the inputs to the function call, a calibration
%     file may be created to map out the errors.  Similar to A3200ACC2D v1.03
%     
% Similar to A3200ACC2D v1.03 except for:
%   - meant for use in stitched multi-zone calibrations
%   - structure data is output from the function call
%       -- contains errors and data file header information
%   - previously open plots are not closed
%   - user not prompted to save plots 
%       -- plot are not saved on an individual zone basis
%   - user not prompted to create calibration file 
%       -- cal file is not generated on an individual zone basis
%   - data file name is included in the plot titles
%
%
% A3200ACC2DMULTIZONE141869(InputFile, CalFile)
%
%    InputFile is a string specifying the data file name.  This is the only required input.
%         Example:  '123456-Ver1.dat'
%
%    CalFile is an optional string specifying the name of the calibration file to be created.
%         If this argument is not specified, a calibration file will not be generated.
%         Example:  '123456-A-1-1_2DCal.cal'
%
% **** ALTERNATE USAGE FOR OLD DATA FILES ****
% A3200ACC2DMULTIZONE141869(InputFile, CalFile, OutAxis3, OutAx3Value, Units)
% 
% FOR OLD DATA FILES WHERE UNITS AND GANTRY INFORMATION NOT IN DATA FILE HEADER
%
%    OutAxis3 is an optional input specifying the number of the third calibration axis.
%         This input parameter is required when one of the axes being calibrated is a gantry axis.  In
%         this case, the next parameter OutAx3Value is also required.  
%
%    OutAx3Value is an optional input parameter specifying which of the two motion axes is the gantry axis.
%         This value is required if the OutAxis3 parameter is non-zero.  In the case where the program units sign
%         of the third axis is opposite that of the master gantry axis, enter the master axis gantry number
%         as a negative number
%
%    Units is an optional input parameter specifying the measurement units.  The default units are METRIC unless
%         otherwise specified. In the case where English units are desired but there is no third axis to calibrate,
%         enter 0 (zero) for the values of OutAxis3 and OutAx3Value.
%         Usage:  0 = METRIC, 1 = ENGLISH
%
% EXAMPLES:
% A3200ACC2DMULTIZONE141869('123456-Ver1.dat')
%     Plots the data in 123456-Ver1.dat without writing a calibration file.
%
% AA3200ACC2DMULTIZONE141869('123456-Cal1.dat', '123456-A-1-1_2DCal.cal')
%     Plots the data in 123456-Cal1.dat and writes the calibration file 123456-A-1-1_2DCal.cal.  
%     If the data file is generated from version 1.03 code or later, the
%     the user units and gantry information is read from the data file header
%     For data files generated from version 1.02 code or prior, the resultant calibration
%     file does not contain compensation for a third axis, and the default units of METRIC are used.
%
% AA3200ACC2DMULTIZONE141869('123456-Cal1.dat', '123456-A-1-1_2DCal.cal', 3, 2)
%     Plots the data in 123456-Cal1.dat and writes the calibration file 123456-A-1-1_2DCal.cal.  
%     For version 1.02 and prior data files, the calibration value for axis 2 is duplicated
%     and used also for axis 3.  The default units of METRIC are used.
%
% A3200ACC2DMULTIZONE141869('123456-Cal1.dat', '123456-A-1-1_2DCal.cal', 3, -2)
%     Plots the data in 123456-Cal1.dat and writes the calibration file 123456-A-1-1_2DCal.cal.  
%     For version 1.02 and prior data files, the calibration value for axis 2 is reversed in 
%     sign and then used for axis 3.  The default units of METRIC are used.
%
% A3200ACC2DMULTIZONE141869('123456-Cal1.dat', '123456-A-1-1_2DCal.cal', 0, 0, 1)
%     Plots the data in 123456-Cal1.dat and writes the calibration file 123456-A-1-1_2DCal.cal.
%     For version 1.02 and prior data files, the calibration file does not contain 
%     compensation for a third axis, and ENGLISH units are used.


%
% Written by Eric Glaser  10/17/07



% SECTION 1.0 CHECK INPUTS AND READ INPUT FILE HEADER
% ****************************************************
% close all

disp(' ')
disp('A3200ACC2DMULTIZONE141869.m - Aerotech, Inc. 2007; MATLAB. 1984-2005 The MathWorks, Inc.');
disp(' ')
disp('v1.03 6/6/07  EG')
disp(' ')
disp('A3200ACC2DMULTIZONE141869  Plot or calibrate 2D accuracy measured using the A3200 Controller')
disp(' ')
disp('Usage:')
disp('A3200ACC2DMULTIZONE141869 datafile.dat')
disp('    Plot 2D accuracy error in data file datafile.dat')
disp(' ')
disp('A3200ACC2DMULTIZONE141869 datafile.dat calfile.cal')
disp('    Plot accuracy error and generate 2D calibration file for use in')
disp('    the A3200 controller based on the data in file datafile.dat.')  
disp('    File calfile.cal is created.') 
disp(' ')

if nargin == 0
  disp('Press Enter to Close...')
  pause
else

fName = InputFile;
% check input options for validity and content
% if nargin > 1           % if more than one input, write a calibration file
%     WriteCalFile = 1;   
% else
    WriteCalFile = 0;  
% end

%if only input and output files are specified, set options to default values
if nargin == 2          
    OutAxis3 = 0;          % do not write third axis calibration
    OutAx3Value = 0;       % do not write third axis calibration
    Units = 0;             % use default units METRIC
end

%if third axis calibration is specified, but master of gantry axis is not, report an error
if nargin == 3 & OutAxis3 ~= 0
    err = sprintf('*****Not enough Inputs! OUTAX3VALUE required.  Type help StaticCal2D for more info *****');
	error(err);
end

%if units is specified, set value and check for incorrect entry
if nargin == 5
    if Units == 0
        UserUnit = 'METRIC';
    elseif Units == 1
        UserUnit = 'ENGLISH';
    else
        err = '*** Incorrect UNITS input parameter:  0 = METRIC, 1 = ENGLISH ***';
        error(err)
    end
else
    UserUnit = 'METRIC';
end
    
% read serial number, axes names, and axes numbers used during data collection from file header
fid = fopen( fName ); % open file for input

if( fid == -1 )
    err = sprintf('*****Could not find file %s!!!!*****', fName);
	errordlg(err);
end

% get serial number
ftxt = fgetl(fid);         % read a first line of text from the file (serial number)
for i =1:length(ftxt)
    if ftxt(i) == ':'
        SN = ftxt((i+2):length(ftxt));      % write serial number value
        break
    end
end

% get name, number, and program units sign of first axis
ftxt = fgetl(fid);          % read a line of text from the file
for i =1:length(ftxt)       % search for the start of the axis name (preceded by a colon)
    if ftxt(i) == ':'
        starttxt = i+2;
        break
    end
end
for i = starttxt:length(ftxt)
    if ftxt(i) == ';'       % search for the end of the axis name (followed by a semicolon)
        endtxt = i-1;
        break
    end
end
Ax1Name = ftxt(starttxt:endtxt);    % write the Axis 1 name value

% get axis number
for i =endtxt:length(ftxt)
    if ftxt(i) == ':'
        starttxt = i+2;
        break
    end
end
for i = starttxt:length(ftxt)
    if ftxt(i) == ';'       % search for the end of the axis number (followed by a semicolon)
        endtxt = i-1;
        break
    end
end
Ax1Num = str2num(ftxt(starttxt:endtxt));    % write the Axis 1 number value

%get program units sign of first axis
for i =endtxt:length(ftxt)
    if ftxt(i) == ':'
        starttxt = i+2;
        break
    end
end
for i = starttxt:length(ftxt)
    if ftxt(i) == ';'       % search for the end of the axis number (followed by a semicolon)
        endtxt = i-1;
        break
    end
    if i == length(ftxt)
        endtxt = length(ftxt);
    end
end
Ax1Sign = str2num(ftxt(starttxt:endtxt));

%check for old data file -- if so

%get gantry axis value of first axis
starttxt = 0;
for i =endtxt:length(ftxt)
    if ftxt(i) == ':'
        starttxt = i+2;
        break
    end
end
if starttxt == 0
    Ax1Gantry = 0;  % old data files do not have a gantry entry line, so this sets value in that case
else
    Ax1Gantry = str2num(ftxt(starttxt:length(ftxt)));
end

% get name and number of second axis
ftxt = fgetl(fid);        % read a line of text from the file
for i =1:length(ftxt)
    if ftxt(i) == ':'
        starttxt = i+2;
        break
    end
end
for i = starttxt:length(ftxt)
    if ftxt(i) == ';'
        endtxt = i-1;
        break
    end
end
Ax2Name = ftxt(starttxt:endtxt);

% get axis number
for i =endtxt:length(ftxt)
    if ftxt(i) == ':'
        starttxt = i+2;
        break
    end
end
for i = starttxt:length(ftxt)
    if ftxt(i) == ';'       % search for the end of the axis number (followed by a semicolon)
        endtxt = i-1;
        break
    end
end
Ax2Num = str2num(ftxt(starttxt:endtxt));    % write the Axis 2 number value

%get program units sign of second axis
for i =endtxt:length(ftxt)
    if ftxt(i) == ':'
        starttxt = i+2;
        break
    end
end
for i = starttxt:length(ftxt)
    if ftxt(i) == ';'       % search for the end of the axis number (followed by a semicolon)
        endtxt = i-1;
        break
    end
    if i == length(ftxt)
        endtxt = length(ftxt);
    end
end
Ax2Sign = str2num(ftxt(starttxt:endtxt));

%get gantry axis value of second axis
starttxt = 0;
for i =endtxt:length(ftxt)
    if ftxt(i) == ':'
        starttxt = i+2;
        break
    end
end
if starttxt == 0
    Ax2Gantry = 0;  % old data files do not have a gantry entry line, so this sets value in that case
else
    Ax2Gantry = str2num(ftxt(starttxt:length(ftxt)));
end

% read user units from the data file
UserUnit = 'METRIC';      %set default units as METRIC, then check for other cases
calDivisor = 1;           %error scaling for calibration table (mm = 1, um = 1000)
posUnit = 'mm';           %position units for charts
errUnit = '\mum';         %error units for charts

if starttxt ~= 0          %old data files do not have UserUnit header line
    ftxt = fgetl(fid);        % read a line of text from the file
    for i =1:length(ftxt)
        if ftxt(i) == ':'
            starttxt = i+2;
            break
        end
    end
    temp = ftxt(starttxt:end); 
    if strcmp(temp,'UM')      %micron program units case
        calDivisor = 1000;    %error scaling for position units and calibration table
    elseif strcmp(temp,'ENGLISH')
        UserUnit = 'ENGLISH'; %english (inch) units case
        posUnit = 'in';       %position units for charts
        errUnit = 'mil';      %error units for charts
    end
end

ftxt = fgetl(fid);           % read a line of text from the file
parse1 = strfind(ftxt,':');  % find all instances of :
parse2 = strfind(ftxt,';');  % find all instances of ;
if strcmp(ftxt(1:9),'%Operator')  % see if this is a new data file and get values
    operator = ftxt((parse1(1)+2):(parse2(1)-1));
    model = ftxt((parse1(2)+2):(parse2(2)-1));
    airTemp = ftxt((parse1(3)+2):(parse2(3)-1));
    matTemp = ftxt((parse1(4)+2):(parse2(4)-1));
    expandCoef = ftxt((parse1(5)+2):(parse2(5)-1));
    comment = ftxt((parse1(6)+2):end);
else  % or, for old data files, set new documentation variables to empty strings
    operator = '';
    model = '';
    airTemp = '';
    matTemp = '';
    expandCoef = '';
    comment = '';
end

% get date
fileInfo = dir(InputFile);
fileDate = fileInfo.date;

fclose(fid);

y_meas_dir = -1;   % slope due to mirror misalignment is always opposite sign between the axes when the laser
                   % and encoder read positive in the same direction

% SECTION 2. LOAD TEST DATA **************************************************************

% change data file format and open file
s = load(fName);
% sort data for ascending step and scan positions
s = sortrows(s,[2 1]);

% load data from file
Ax1TestLoc = s(:,1);        % incremental counter, no units
Ax2TestLoc = s(:,2);        % incremental counter, no units
Ax1PosCmd = s(:,3) / calDivisor;         % for micron program units case, convert to mm
Ax2PosCmd = s(:,4) / calDivisor;         % for micron program units case, convert to mm
Ax1RelErr = s(:,5) / calDivisor;         % for micron program units case, convert to mm
Ax2RelErr = s(:,6) / calDivisor;         % for micron program units case, convert to mm

% SECTION 3. CALCULATE RELATIVE ERROR, NUMBER OF TEST POINTS, SAMPLE DISTANCE, AND MOVE DISTANCES *****

Ax1RelErr = (Ax1RelErr-mean(Ax1RelErr)) * 1000;   % convert to microns, subtract mean error
Ax2RelErr = (Ax2RelErr-mean(Ax2RelErr)) * 1000;   % convert to microns, subtract mean error

% calculate the number of test locations, the total move distances, and the step distances
NumAx1Points = max(Ax1TestLoc);
NumAx2Points = max(Ax2TestLoc);
Ax1MoveDist = max(Ax1PosCmd) - min(Ax1PosCmd);
Ax2MoveDist = max(Ax2PosCmd) - min(Ax2PosCmd);
Ax1SampDist = Ax1PosCmd(2) - Ax1PosCmd(1);
Ax2SampDist = Ax2PosCmd(NumAx1Points + 1) - Ax2PosCmd(1);

% SECTION 4. CREATE 2D POSITION AND ERROR TABLES *******************************************************

% Create position vectors for Ax1 and Ax2
Ax1Pos = Ax1PosCmd(1:NumAx1Points);
Ax2Pos = Ax2PosCmd(1:(NumAx1Points):(NumAx1Points*NumAx2Points));

% create 2D matrices for Ax1 and Ax2 position and laser data
[X,Y] = meshgrid(Ax1Pos, Ax2Pos);
SizeGrid = size(X);
%normalize position vectors for griddata command
%MJS 5Feb2018 - Changed the next two lines to max-min to fix a bug where
%all negative travel led to divide by zero.
maxAx1 = max(Ax1Pos)-min(Ax1Pos);
maxAx2 = max(Ax2Pos)-min(Ax2Pos);
Ax1Err = griddata(Ax1PosCmd/maxAx1, Ax2PosCmd/maxAx2, Ax1RelErr, X/maxAx1, Y/maxAx2);
Ax2Err = griddata(Ax1PosCmd/maxAx1, Ax2PosCmd/maxAx2, Ax2RelErr, X/maxAx1, Y/maxAx2);

% SECTION 5. REMOVE MIRROR SLOPE AND CALCULATE ORTHOGONALITY ******************************************

% line fit the straightness error data with respect to the stage position
Ax1Coef = polyfit(Y(:,1), mean(Ax1Err,2),1);   % slope units microns/mm
Ax2Coef = polyfit(X(1,:), mean(Ax2Err),1);   % slope units microns/mm

% create best fit line for X data, use X line for Y data (to calibrate in orthogonality)
Ax1Line = polyval(Ax1Coef, Y(:,1));
Ax2Line = polyval(y_meas_dir * Ax1Coef, X(1,:));

% create straightness data for orthogonality plots (remove best fit lines)
Ax1Orthog = mean(Ax1Err,2) - Ax1Line;
Ax2Orthog = mean(Ax2Err) - polyval(Ax2Coef, X(1,:));

% subrtract the line fits from the Ax1 and Ax2 error data (remove mirror slope)
for i = 1:SizeGrid(2)
    Ax1Err(:,i) = Ax1Err(:,i) - Ax1Line;
end
for i = 1:SizeGrid(1)
    Ax2Err(i,:) = Ax2Err(i,:) - Ax2Line;
end

% calculate orthogonality
orthog = Ax1Coef(1) - y_meas_dir * Ax2Coef(1);
orthog = atan(orthog/1000) * 180/pi * 3600;  % arc sec
      

% SECTION 6. CALCULATE THE VECTOR SUM ACCURACY ERROR ****************************************** 

% subtract error at origin of xy grid prior to vector sum calculation
Ax1Err = Ax1Err - Ax1Err(1,1);
Ax2Err = Ax2Err - Ax2Err(1,1);

% calculate the total vector sum accuracy error
VectorErr = sqrt(Ax1Err.^2 + Ax2Err.^2);

% SECTION 7. PLOT THE RESULTS ************************************************************************  

% plot the results
  %SUMMARY PLOT
clear ttl
g=figure;
figName = 'Results Summary';
set(g,'Position',[270 160 730 555],'PaperPositionMode','manual','Name',figName)
subplot(221)
offset = mean([max(max(Ax1Err)) min(min(Ax1Err))]);
amplitude = max(max(Ax1Err- offset));
surf(X,Y,Ax1Err- offset)
shading interp
ttl(1) = {sprintf('%s Error: {\\pm}%1.1f%s', Ax1Name, amplitude, errUnit)};
title(ttl)
labx = sprintf('%s (%s)', Ax1Name, posUnit);
laby = sprintf('%s (%s)', Ax2Name, posUnit);
xlabel(labx)
ylabel(laby)
txt = sprintf('(%s)', errUnit);
zlabel(txt)
view([-1 -1 .5])
set(gca,'PlotBoxAspectRatio', [1 1 .5])
axlim = axis;
maxz = max(abs(axlim(5:6)));
zscaling = 1;  % rounding increment for z scale
maxz = ceil(maxz/zscaling)*zscaling;
axlim(5:6) = ([-maxz maxz]);
ax = gca;
set(ax, 'XLim', (axlim(1:2)), 'YLim', (axlim(3:4)),'ZLim',(axlim(5:6)));

subplot(222)
offset = mean([max(max(Ax2Err)) min(min(Ax2Err))]);
amplitude = max(max(Ax2Err- offset));
surf(X,Y,Ax2Err- offset)
shading interp
ttl(1) = {sprintf('%s Error: {\\pm}%1.1f%s', Ax2Name, amplitude, errUnit)};
title(ttl)
labx = sprintf('%s (%s)', Ax1Name, posUnit);
laby = sprintf('%s (%s)', Ax2Name, posUnit);
xlabel(labx)
ylabel(laby)
txt = sprintf('(%s)', errUnit);
zlabel(txt)
view([-1 -1 .5])
set(gca,'PlotBoxAspectRatio', [1 1 .5])
axlim = axis;
maxz = max(abs(axlim(5:6)));
zscaling = 1;  % rounding increment for z scale
maxz = ceil(maxz/zscaling)*zscaling;
axlim(5:6) = ([-maxz maxz]);
ax = gca;
set(ax, 'XLim', (axlim(1:2)), 'YLim', (axlim(3:4)),'ZLim',(axlim(5:6)));

subplot(212)
amplitude = max(max(VectorErr));
surf(X,Y,VectorErr)
shading interp
ttl(1) = {sprintf('%s%s Error: %1.1f%s, Orthogonality: %1.1fsec', Ax1Name, Ax2Name, amplitude, errUnit, orthog)};
title(ttl)
xlabel(labx)
ylabel(laby)
txt = sprintf('(%s)', errUnit);
zlabel(txt)
clear txt 
view([-1 -1 .5])
set(gca,'PlotBoxAspectRatio', [1 1 .5])
axlim = axis;
maxz = max(abs(axlim(5:6)));
maxz = ceil(maxz/zscaling)*zscaling;
axlim(5:6) = ([0 maxz]);
ax = gca;
set(ax, 'XLim', (axlim(1:2)), 'YLim', (axlim(3:4)),'ZLim',(axlim(5:6)));
zTextLoc = axlim(5)-(axlim(6)-axlim(5))/2;
text (axlim(1), axlim(3),  zTextLoc, 'Aerotech Confidential', 'HorizontalAlignment', 'Center',...
    'Color', 'r', 'FontSize', 10, 'FontWeight', 'bold');   

clear ttl
ttl=sprintf('%s 2D Accuracy Test Summary, File: %s', SN, fName);
subtitle(ttl)
orient landscape 
clear ttl
    
% Axis 1 Direction Error
g=figure;
figName = sprintf('%s Direction Error', Ax1Name);
set(g,'Position',[270 160 730 555],'PaperPositionMode','manual','Name',figName)
offset = mean([max(max(Ax1Err)) min(min(Ax1Err))]);
amplitude = max(max(Ax1Err- offset));
surf(X,Y,Ax1Err- offset)
colorbar
shading interp
ttl(1) = {sprintf('%s Direction 2D Accuracy Error',Ax1Name)};
ttl(2) = {sprintf('Error: {\\pm}%1.1f%s, SN: %s, File: %s', amplitude, errUnit, SN, fName)};
title(ttl, 'FontWeight','bold')
labx = sprintf('%s Position (%s)', Ax1Name, posUnit);
laby = sprintf('%s Position (%s)', Ax2Name, posUnit);
xlabel(labx)
ylabel(laby)
txt = sprintf('%s Accuracy Error (%s)', Ax1Name, errUnit);
zlabel(txt)
view([-1 -1 .5])
set(gca,'PlotBoxAspectRatio', [1 1 .5])
axlim = axis;
maxz = max(abs(axlim(5:6)));
zscaling = 1;  % rounding increment for z scale
maxz = ceil(maxz/zscaling)*zscaling;
axlim(5:6) = ([-maxz maxz]);
ax = gca;
set(ax, 'XLim', (axlim(1:2)), 'YLim', (axlim(3:4)),'ZLim',(axlim(5:6)));
zTextLoc = axlim(5)-(axlim(6)-axlim(5))/2;
text (axlim(1), axlim(3),  zTextLoc, 'Aerotech Confidential', 'HorizontalAlignment', 'Center',...
    'Color', 'r', 'FontSize', 10, 'FontWeight', 'bold');    
orient landscape

% Axis 2 Direction Error
g=figure;
figName = sprintf('%s Direction Error', Ax2Name);
set(g,'Position',[300 130 730 555],'PaperPositionMode','manual','Name',figName)
offset = mean([max(max(Ax2Err)) min(min(Ax2Err))]);
amplitude = max(max(Ax2Err- offset));
surf(X,Y,Ax2Err-offset)
shading interp
colorbar
ttl(1) = {sprintf('%s Direction 2D Accuracy Error',Ax2Name)};
ttl(2) = {sprintf('Error: {\\pm}%1.1f%s, SN: %s, File: %s', amplitude, errUnit, SN, fName)};
title(ttl, 'FontWeight','bold')
xlabel(labx)
ylabel(laby)
txt = sprintf('%s Accuracy Error (%s)', Ax2Name, errUnit);
zlabel(txt)
view([-1 -1 .5])
set(gca,'PlotBoxAspectRatio', [1 1 .5])
axlim = axis;
maxz = max(abs(axlim(5:6)));
maxz = ceil(maxz/zscaling)*zscaling;
axlim(5:6) = ([-maxz maxz]);
ax = gca;
set(ax, 'XLim', (axlim(1:2)), 'YLim', (axlim(3:4)),'ZLim',(axlim(5:6)));
zTextLoc = axlim(5)-(axlim(6)-axlim(5))/2;
text (axlim(1), axlim(3),  zTextLoc, 'Aerotech Confidential', 'HorizontalAlignment', 'Center',...
    'Color', 'r', 'FontSize', 10, 'FontWeight', 'bold');   
orient landscape

% Vector Sum Error
g=figure;
figName = sprintf('%s%s Vector Error', Ax1Name,Ax2Name);
set(g,'Position',[330 100 730 555],'PaperPositionMode','manual','Name',figName)
amplitude = max(max(VectorErr));
surf(X,Y,VectorErr)
shading interp
colorbar
ttl(1) = {sprintf('%s%s Vector Sum 2D Accuracy Error', Ax1Name, Ax2Name)};
ttl(2) = {sprintf('Error: %1.1f%s, SN: %s, File: %s', amplitude, errUnit, SN, fName)};
title(ttl, 'FontWeight','bold')
xlabel(labx)
ylabel(laby)
txt = sprintf('Accuracy Error (%s)', errUnit);
zlabel(txt)
clear txt
view([-1 -1 .5])
set(gca,'PlotBoxAspectRatio', [1 1 .5])
axlim = axis;
maxz = max(abs(axlim(5:6)));
maxz = ceil(maxz/zscaling)*zscaling;
axlim(5:6) = ([0 maxz]);
ax = gca;
set(ax, 'XLim', (axlim(1:2)), 'YLim', (axlim(3:4)),'ZLim',(axlim(5:6)));
zTextLoc = axlim(5)-(axlim(6)-axlim(5))/2;
text (axlim(1), axlim(3),  zTextLoc, 'Aerotech Confidential', 'HorizontalAlignment', 'Center',...
    'Color', 'r', 'FontSize', 10, 'FontWeight', 'bold');    
orient landscape

% Orthogonality Error
g=figure;
figName = sprintf('Orthogonality Error');
set(g,'Position',[360 70 730 555],'PaperPositionMode','manual','Name',figName)
subplot(211)
plot(X(1,:), Ax2Orthog,'.-')
ax1 = gca;
axlim = axis;
axlim(4) = max(abs(axlim(3:4)));
axlim(4) = ceil(axlim(4)/.5)*0.5;
axlim(3) = -axlim(4);
ylim(axlim(3:4))
grid on
ttl(1) = {sprintf('%s%s Orthogonality, SN: %s', Ax1Name, Ax2Name, SN)};
ttl(2) = {sprintf('Orthogonality = %1.1f sec, File: %s', orthog, fName)};
title(ttl, 'FontWeight','bold')
labx = sprintf('%s Position (%s)', Ax1Name, posUnit);
xlabel(labx)
laby = sprintf('%s Avg Straightness ( %s)', Ax1Name, errUnit);
ylabel(laby)
txt(1) = {sprintf('Raw Slope: %1.3f %s/%s', Ax2Coef(1), errUnit, posUnit)};
text(mean(axlim(1:2)), axlim(3)*0.9, txt, 'HorizontalAlignment','center');
subplot(212)
plot(Y(:,1), Ax1Orthog,'.-')
labx = sprintf('%s Position (%s)', Ax2Name, posUnit);
xlabel(labx)
laby = sprintf('%s Avg Straightness ( %s)', Ax2Name, errUnit);
ylabel(laby);
grid on
axlim = axis;
axlim(4) = max(abs(axlim(3:4)));
axlim(4) = ceil(axlim(4)/.5)*0.5;
axlim(3) = -axlim(4);
ylim(axlim(3:4))
txt(1) = {sprintf('Raw Slope: %1.3f %s/%s', y_meas_dir * Ax1Coef(1), errUnit, posUnit)};
text(mean(axlim(1:2)), axlim(3)*0.9, txt, 'HorizontalAlignment','center');
yTextLoc = axlim(3)-(axlim(4)-axlim(3))/4;
text(mean(axlim(1:2)), yTextLoc, 'Aerotech Confidential', 'HorizontalAlignment', 'Center',...
    'Color', 'r', 'FontSize', 10, 'FontWeight', 'bold');  
orient landscape

% reorient figures on screen so SUMMARY plot is on top
figure(4)
figure(3)
figure(2)
figure(1)

% printFigs = 1;
% button = questdlg('Save the Plots to File?','Print to File (*.png)','Yes');
% if strcmp(button,'Yes')
%     printFigs = 1;
% else
    printFigs = 0;
% end

if printFigs
    % Set prefix for plot files.  If A3200\Plots directory exists, save the
    % files in that location.  If not, save in the current program
    % directory
    if isdir('C:\A3200\Plots')
        pPrefix = sprintf('C:\\A3200\\Plots\\%s', SN);
    else
        pPrefix = SN;
    end
    
    p = dir(sprintf('%s-2DSummary-*.png',pPrefix));             %find existing plots
    pFile(1) = {sprintf('%s-2DSummary-%u.png',pPrefix,length(p)+1)}; %create new plot file name
    pList(1) = {sprintf('Summary: %s',char(pFile(1)))};
    pList(2) = {' '};       
    
    p = dir(sprintf('%s-Ax1Err-*.png',pPrefix));             %find existing plots
    pFile(2) = {sprintf('%s-Ax1Err-%u.png',pPrefix,length(p)+1)}; %create new plot file name
    pList(3) = {sprintf('Axis 1 Error: %s',char(pFile(2)))};
    pList(4) = {' '};    
    
    p = dir(sprintf('%s-Ax2Err-*.png',pPrefix));             %find existing plots
    pFile(3) = {sprintf('%s-Ax2Err-%u.png',pPrefix,length(p)+1)}; %create new plot file name
    pList(5) = {sprintf('Axis 2 Error: %s', char(pFile(3)))};
    pList(6) = {' '};
    
    p = dir(sprintf('%s-VectorErr-*.png',pPrefix));             %find existing plots
    pFile(4) = {sprintf('%s-VectorErr-%u.png',pPrefix,length(p)+1)}; %create new plot file name
    pList(7) = {sprintf('Vector Sum Error: %s', char(pFile(4)))};
    pList(8) = {' '};    
    
    p = dir(sprintf('%s-Orthog-*.png',pPrefix));             %find existing plots
    pFile(5) = {sprintf('%s-Orthog-%u.png',pPrefix,length(p)+1)}; %create new plot file name    
    pList(9) = {sprintf('Orthogonality Error: %s', char(pFile(5)))};
      
    % Axis 1 Error Plot
    clear txt
    txt = 'Plotting Figures to File...';
    h = waitbar(0,txt,'Name','Print Status');
    eval(['print -f1 -r300 -dpng ' char(pFile(1))])                   %print to PNG image
    % Axis 1 Error Plot
    waitbar(.2,h)
    eval(['print -f2 -r300 -dpng ' char(pFile(2))])                   %print to PNG image
    % Axis 2 Error Plot
    waitbar(.4,h)
    eval(['print -f3 -r300 -dpng ' char(pFile(3))])                   %print to PNG image
    % Vector Error Plot
    waitbar(0.6,h)
    eval(['print -f4 -r300 -dpng ' char(pFile(4))])                      %print to PNG image
    % Orthog Plot
    waitbar(0.8,h)
    eval(['print -f5 -r300 -dpng ' char(pFile(5))])                   %print to PNG image
    waitbar(1.0,h)
    close(h)
    
    % display file names
    pause(0.3)
    h=msgbox(pList,'Plot Job Complete','help');
    uiwait(h);
 
end

% SECTION 8. GENERATE CALIBRATION FILE ***********************************************************
% % Axis 1 direction is left to right in the table.  Axis 2 direction is
% top to bottom

if WriteCalFile

%check for existing calibration file
    p = dir(CalFile);             %find existing plots
        if length(p) > 0
        clear txt
        txt = sprintf('File %s already exists.  Overwrite?',CalFile);
        pause(0.3)
        button = questdlg(txt,'WARNING: File Already Exists','No');
        if strcmp(button,'No')
                WriteCalFile = 0;
        end
    end
end

if WriteCalFile
        
% Create signed calibration error tables
Ax1cal = -Ax1Sign * round(Ax1Err*10000)/10000;    % units microns, precision to nm/10
Ax2cal = -Ax2Sign * round(Ax2Err*10000)/10000;    % units microns, precision to nm/10
    
% determine the number of gantry axes
numGantry = 0;
if Ax1Gantry ~= 0
    numGantry = 1;
end
if Ax2Gantry ~= 0
    numGantry = numGantry + 1;
end

if numGantry == 0 & OutAxis3 ~= 0  % case of old data file without gantry header info
    numGantry = 1;
end

if numGantry > 1
    numTables = 2;
else
    numTables = 1;
end

fp = fopen(CalFile,'wt+');
for N = 1:numTables
if numGantry == 0
    OutAxis3 = 0;
else
    if N == 1
        if Ax1Gantry ~= 0
            OutAxis3 = abs(Ax1Gantry);
            OutAx3Value = sign(Ax1Gantry)*Ax1Num;
        elseif Ax2Gantry ~= 0
            OutAxis3 = abs(Ax2Gantry);
            OutAx3Value = sign(Ax2Gantry)*Ax2Num;
        end
    else
        OutAxis3 = abs(Ax2Gantry);
        OutAx3Value = sign(Ax2Gantry)*Ax2Num;
    end
end

% write cal file header based on options set in the inputs and also based
% on stage test location
fprintf(fp,':START2D %u %u %u %u %1.3f %1.3f %u \n', Ax2Num, Ax1Num, Ax1Num, Ax2Num,...
    Ax2Sign * Ax2SampDist * calDivisor , Ax1Sign * Ax1SampDist * calDivisor, NumAx1Points);
if OutAxis3 ~= 0
    ColumnMultiple = 3;               % number of columns per test location  (3 for three axis compensation)
    if (X(1,1) == 0) & (Y(1,1) == 0)
        fprintf(fp,':START2D OUTAXIS3=%u POSUNIT=%s CORUNIT=%s/%u \n', OutAxis3, UserUnit, UserUnit, 1000/calDivisor);
    else
        fprintf(fp,':START2D OUTAXIS3=%u POSUNIT=%s CORUNIT=%s/%u OFFSETROW = %1.3f OFFSETCOL = %1.3f \n', ...
            OutAxis3, UserUnit, UserUnit, 1000/calDivisor, -Ax2Sign * Y(1,1) * calDivisor, -Ax1Sign * X(1,1) * calDivisor);
    end
else
    ColumnMultiple = 2;               % number of columns per test location  (2 for two axis compensation)
    if (X(1,1) == 0) & (Y(1,1) == 0)
        fprintf(fp,':START2D POSUNIT=%s CORUNIT=%s/%u \n', UserUnit, UserUnit, 1000/calDivisor);
    else
        fprintf(fp,':START2D POSUNIT=%s CORUNIT=%s/%u OFFSETROW = %1.3f OFFSETCOL = %1.3f \n', ...
            UserUnit, UserUnit, 1000/calDivisor, -Ax2Sign * Y(1,1) * calDivisor, -Ax1Sign * X(1,1) * calDivisor);
    end
end
    
fprintf(fp,'\n');

for i = 1:NumAx2Points
    count = 0;
    for j = 1:ColumnMultiple:(ColumnMultiple*NumAx1Points)
        count = count+1;
        
        % create matrix CalTable to store calibration values
        if numTables > 1 & N == 1
            CalTable(i,j) = Ax1cal(i,count);           % axis 1 correction in 1st cal table
            CalTable(i,j+1) = 0;                       % zero correction of ax2 for 1st cal table
        elseif numTables > 1 & N == 2
            CalTable(i,j) = 0;                          % zero correction of ax1 for 2nd cal table
            CalTable(i,j+1) = Ax2cal(i,count);          % axis 2 correction in 2nd cal table
        else
            CalTable(i,j) = Ax1cal(i,count);           % Ax 1 correction -- one cal table only
            CalTable(i,j+1) = Ax2cal(i,count);         % Ax 2 correctoin -- one cal table only
        end
        if OutAxis3 ~= 0
            sign3 = sign(OutAx3Value);
            if abs(OutAx3Value) == (Ax1Num)
                CalTable(i,j+2) = sign3 * Ax1cal(i,count);     % Axis 3 correction same as Axis 1
            elseif abs(OutAx3Value) == (Ax2Num)
                CalTable(i,j+2) = sign3 * Ax2cal(i,count);     % Axis 3 correction same as Axis 2
            end
        end
        
        % write values in CalTable to file
        fprintf(fp,'%1.4f\t',CalTable(i,j));           % write cal value for the first axis
        if ColumnMultiple == 2                         % if no third axis value, check to see if this point is in the last column
            if j == (ColumnMultiple*NumAx1Points - 1)
                fprintf(fp,'%1.4f\n',CalTable(i,j+1));
            else
                fprintf(fp,'%1.4f\t',CalTable(i,j+1));
            end
        else
            fprintf(fp,'%1.4f\t',CalTable(i,j+1));     % if there is third axis cal value, write cal value for the second axis
            if j==(3*NumAx1Points - 2)                 % check to see if this point is in the last column
                fprintf(fp,'%1.4f\n',CalTable(i,j+2));
            else
                fprintf(fp,'%1.4f\t',CalTable(i,j+2));
            end
        end
    end
end
fprintf(fp,'\n');
fprintf(fp,':END');

if N < numTables
    fprintf(fp,'\n');
    fprintf(fp,'\n');
end

end  % for N = 1:numTables loop

fclose(fp);

clear txt
txt = sprintf('Calibration file name is %s',CalFile);
pause(0.3)
helpdlg(txt,'Calibration File Status')

end  %if WriteCalFile

end  %if nargin == 0 else

data.X = X;
data.Y = Y;
data.Ax1Err = Ax1Err;
data.Ax2Err = Ax2Err;
data.SN = SN;
data.Ax1Name = Ax1Name;
data.Ax2Name = Ax2Name;
data.Ax1Num = Ax1Num;
data.Ax2Num = Ax2Num;
data.Ax1Sign = Ax1Sign;
data.Ax2Sign = Ax2Sign;
data.UserUnit = UserUnit;      
data.calDivisor = calDivisor;          
data.posUnit = posUnit;           
data.errUnit = errUnit;
data.Ax1Gantry = Ax1Gantry;
data.Ax2Gantry = Ax2Gantry;
data.Ax1SampDist = Ax1SampDist;
data.Ax2SampDist = Ax2SampDist;
data.operator = operator;
data.model = model;
data.airTemp = airTemp;
data.matTemp = matTemp;
data.expandCoef = expandCoef;
data.comment = comment;
data.fileDate = fileDate;


% *************  END **********************************
