#!/usr/bin/env python3
"""
Compare calibration files generated by Python and MATLAB versions
"""

import os
import hashlib


def compare_cal_files():
    """Compare Python and MATLAB generated calibration files"""
    
    print("=" * 60)
    print("CALIBRATION FILE COMPARISON: Python vs MATLAB")
    print("=" * 60)
    
    python_cal = "stitched_multizone_python.cal"
    matlab_cal = "stitched_multizone_matlab.cal"
    python_dat = "stitched_multizone_accuracy_python.dat"
    matlab_dat = "stitched_multizone_accuracy_matlab.dat"
    
    # Check file existence
    files_to_check = [
        (python_cal, "Python .cal file"),
        (matlab_cal, "MATLAB .cal file"),
        (python_dat, "Python .dat file"),
        (matlab_dat, "MATLAB .dat file")
    ]
    
    missing_files = []
    for file_path, description in files_to_check:
        if os.path.exists(file_path):
            size = os.path.getsize(file_path)
            print(f"✅ {description}: {file_path} ({size:,} bytes)")
        else:
            print(f"❌ {description}: {file_path} (MISSING)")
            missing_files.append(file_path)
    
    if missing_files:
        print(f"\n❌ Cannot proceed - {len(missing_files)} files missing")
        return False
    
    print("\n" + "=" * 40)
    print("FILE COMPARISON RESULTS")
    print("=" * 40)
    
    # Compare .cal files
    print("\n🔍 CALIBRATION FILE (.cal) COMPARISON:")
    cal_identical = compare_files_detailed(python_cal, matlab_cal)
    
    # Compare .dat files  
    print("\n🔍 ACCURACY DATA FILE (.dat) COMPARISON:")
    dat_identical = compare_files_detailed(python_dat, matlab_dat)
    
    print("\n" + "=" * 60)
    print("OVERALL RESULTS:")
    
    if cal_identical and dat_identical:
        print("🎉 PERFECT MATCH! All calibration files are identical!")
        print("✅ Python and MATLAB generate exactly the same output files")
        return True
    else:
        if not cal_identical:
            print("❌ Calibration files (.cal) differ")
        if not dat_identical:
            print("❌ Accuracy files (.dat) differ")
        print("⚠️  Investigation needed")
        return False


def compare_files_detailed(file1, file2):
    """Compare two files in detail"""
    
    print(f"  Comparing: {file1} vs {file2}")
    
    # File size comparison
    size1 = os.path.getsize(file1)
    size2 = os.path.getsize(file2)
    
    if size1 != size2:
        print(f"  ❌ Size difference: {size1:,} vs {size2:,} bytes")
        return False
    else:
        print(f"  ✅ File sizes match: {size1:,} bytes")
    
    # Hash comparison
    hash1 = get_file_hash(file1)
    hash2 = get_file_hash(file2)
    
    if hash1 != hash2:
        print(f"  ❌ Content differs")
        print(f"    {file1} hash: {hash1}")
        print(f"    {file2} hash: {hash2}")
        
        # Show first difference
        find_first_difference(file1, file2)
        return False
    else:
        print(f"  ✅ Content identical (SHA256: {hash1[:16]}...)")
        return True


def get_file_hash(filepath):
    """Get SHA256 hash of file"""
    hash_obj = hashlib.sha256()
    with open(filepath, 'rb') as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_obj.update(chunk)
    return hash_obj.hexdigest()


def find_first_difference(file1, file2):
    """Find and display first difference between files"""
    
    try:
        with open(file1, 'r', encoding='utf-8', errors='ignore') as f1, \
             open(file2, 'r', encoding='utf-8', errors='ignore') as f2:
            
            line_num = 1
            for line1, line2 in zip(f1, f2):
                if line1 != line2:
                    print(f"    First difference at line {line_num}:")
                    print(f"    {file1}: {repr(line1[:100])}")
                    print(f"    {file2}: {repr(line2[:100])}")
                    return
                line_num += 1
                
                # Limit search to avoid huge output
                if line_num > 100:
                    print(f"    (Checked first {line_num} lines - continuing search...)")
                    break
                    
    except UnicodeDecodeError:
        print("    Files appear to be binary - detailed comparison not available")


if __name__ == "__main__":
    success = compare_cal_files()
    exit(0 if success else 1)
